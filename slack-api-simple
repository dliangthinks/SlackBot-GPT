
import os
from openai import OpenAI
from slack_bolt.adapter.socket_mode import SocketModeHandler
from slack_sdk import WebClient
from slack_bolt import App

OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
SLACK_BOT_TOKEN = os.environ["SLACK_BOT_TOKEN"]
# what is signing secret for?
# SIGNING_SECRET = os.environ["SIGNING_SECRET"]
SLACK_APP_TOKEN = os.environ["SLACK_APP_TOKEN"]

# Event API & Web API
app = App(token=SLACK_BOT_TOKEN) 
openai_client = OpenAI(api_key=OPENAI_API_KEY)
slack_client = WebClient(SLACK_BOT_TOKEN)

# This happens when I direct message the bot

# This gets activated when the bot is tagged in a channel    
@app.event("app_mention")
def handle_message_events(body, logger):
    # Log message
    #print(str(body["event"]["text"]).split(">")[1])
    
    # Create prompt for ChatGPT
    prompt = str(body["event"]["text"]).split(">")[1]
    
    # # Let the user know that we are busy with the request 
    # response = slack_client.chat_postMessage(channel=body["event"]["channel"], 
    #                                    thread_ts=body["event"]["event_ts"],
    #                                    text=f"Hello from your bot! :robot_face: \nThanks for your request, I'm on it!")
    
    # Check ChatGPT
    chat_completion = openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant named working as part of the Stanford Technology Training team"},
            {"role": "user", "content": prompt}
        ]
    )
    response_text = chat_completion.choices[0].message.content

    # Reply to thread 
    response = slack_client.chat_postMessage(channel=body["event"]["channel"], 
                                       thread_ts=body["event"]["event_ts"],
                                       text=response_text)

if __name__ == "__main__":
    SocketModeHandler(app, SLACK_APP_TOKEN).start()
